// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: multi.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DownloadShort_DownTiktok_FullMethodName  = "/downloadshort.DownloadShort/DownTiktok"
	DownloadShort_DownYoutube_FullMethodName = "/downloadshort.DownloadShort/DownYoutube"
)

// DownloadShortClient is the client API for DownloadShort service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadShortClient interface {
	DownTiktok(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ReturnsReply, error)
	DownYoutube(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ReturnsReply, error)
}

type downloadShortClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadShortClient(cc grpc.ClientConnInterface) DownloadShortClient {
	return &downloadShortClient{cc}
}

func (c *downloadShortClient) DownTiktok(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ReturnsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnsReply)
	err := c.cc.Invoke(ctx, DownloadShort_DownTiktok_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadShortClient) DownYoutube(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ReturnsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnsReply)
	err := c.cc.Invoke(ctx, DownloadShort_DownYoutube_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadShortServer is the server API for DownloadShort service.
// All implementations must embed UnimplementedDownloadShortServer
// for forward compatibility
type DownloadShortServer interface {
	DownTiktok(context.Context, *ParamsRequest) (*ReturnsReply, error)
	DownYoutube(context.Context, *ParamsRequest) (*ReturnsReply, error)
	mustEmbedUnimplementedDownloadShortServer()
}

// UnimplementedDownloadShortServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadShortServer struct {
}

func (UnimplementedDownloadShortServer) DownTiktok(context.Context, *ParamsRequest) (*ReturnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownTiktok not implemented")
}
func (UnimplementedDownloadShortServer) DownYoutube(context.Context, *ParamsRequest) (*ReturnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownYoutube not implemented")
}
func (UnimplementedDownloadShortServer) mustEmbedUnimplementedDownloadShortServer() {}

// UnsafeDownloadShortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadShortServer will
// result in compilation errors.
type UnsafeDownloadShortServer interface {
	mustEmbedUnimplementedDownloadShortServer()
}

func RegisterDownloadShortServer(s grpc.ServiceRegistrar, srv DownloadShortServer) {
	s.RegisterService(&DownloadShort_ServiceDesc, srv)
}

func _DownloadShort_DownTiktok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadShortServer).DownTiktok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadShort_DownTiktok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadShortServer).DownTiktok(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadShort_DownYoutube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadShortServer).DownYoutube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadShort_DownYoutube_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadShortServer).DownYoutube(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadShort_ServiceDesc is the grpc.ServiceDesc for DownloadShort service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadShort_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "downloadshort.DownloadShort",
	HandlerType: (*DownloadShortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownTiktok",
			Handler:    _DownloadShort_DownTiktok_Handler,
		},
		{
			MethodName: "DownYoutube",
			Handler:    _DownloadShort_DownYoutube_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multi.proto",
}
